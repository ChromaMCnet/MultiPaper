From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 5 May 2024 01:31:47 +0900
Subject: [PATCH] Thread-safe NeigbhorUpdater


diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 487bb3e75afc5871a79506a54f0f4af806460b14..8f7a1f1e3be9a7a2dd86d6f1dd836aa5b242a258 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -99,6 +99,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
+import puregero.multipaper.threading.PerThreadNeighborUpdater;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -290,7 +291,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.thread = Thread.currentThread();
         this.biomeManager = new BiomeManager(this, i);
         this.isDebug = flag1;
-        this.neighborUpdater = new CollectingNeighborUpdater(this, j);
+        this.neighborUpdater = new PerThreadNeighborUpdater(() -> new CollectingNeighborUpdater(this, j)); // MultiPaper - thread-safe
         this.registryAccess = iregistrycustom;
         this.damageSources = new DamageSources(iregistrycustom);
         // CraftBukkit start
diff --git a/src/main/java/puregero/multipaper/threading/PerThreadNeighborUpdater.java b/src/main/java/puregero/multipaper/threading/PerThreadNeighborUpdater.java
new file mode 100644
index 0000000000000000000000000000000000000000..15e4928cc0948b53b8713cd3584070fa6dfe2cba
--- /dev/null
+++ b/src/main/java/puregero/multipaper/threading/PerThreadNeighborUpdater.java
@@ -0,0 +1,60 @@
+package puregero.multipaper.threading;
+
+import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.redstone.NeighborUpdater;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import puregero.multipaper.util.SimpleStampedLock;
+
+import java.util.function.Supplier;
+
+public class PerThreadNeighborUpdater implements NeighborUpdater {
+
+    private final Supplier<NeighborUpdater> factory;
+    private final Long2ReferenceOpenHashMap<NeighborUpdater> neighborUpdaters = new Long2ReferenceOpenHashMap<>();
+    private final SimpleStampedLock lock = new SimpleStampedLock();
+
+    public PerThreadNeighborUpdater(Supplier<NeighborUpdater> factory) {
+        this.factory = factory;
+    }
+
+    private NeighborUpdater getOrCreate() {
+        long id = Thread.currentThread().threadId();
+        NeighborUpdater neighborUpdater = get(id);
+
+        if (neighborUpdater == null) {
+            lock.write(() -> this.neighborUpdaters.put(id, factory.get()));
+            neighborUpdater = get(id);
+        }
+
+        return neighborUpdater;
+    }
+
+    private NeighborUpdater get(long id) {
+        return lock.optimisticRead(() -> this.neighborUpdaters.get(id));
+    }
+
+    @Override
+    public void shapeUpdate(@NotNull Direction direction, @NotNull BlockState neighborState, @NotNull BlockPos pos, @NotNull BlockPos neighborPos, int flags, int maxUpdateDepth) {
+        getOrCreate().shapeUpdate(direction, neighborState, pos, neighborPos, flags, maxUpdateDepth);
+    }
+
+    @Override
+    public void neighborChanged(@NotNull BlockPos pos, @NotNull Block sourceBlock, @NotNull BlockPos sourcePos) {
+        getOrCreate().neighborChanged(pos, sourceBlock, sourcePos);
+    }
+
+    @Override
+    public void neighborChanged(@NotNull BlockState state, @NotNull BlockPos pos, @NotNull Block sourceBlock, @NotNull BlockPos sourcePos, boolean notify) {
+        getOrCreate().neighborChanged(state, pos, sourceBlock, sourcePos, notify);
+    }
+
+    @Override
+    public void updateNeighborsAtExceptFromFacing(@NotNull BlockPos pos, @NotNull Block sourceBlock, @Nullable Direction except) {
+        getOrCreate().updateNeighborsAtExceptFromFacing(pos, sourceBlock, except);
+    }
+}

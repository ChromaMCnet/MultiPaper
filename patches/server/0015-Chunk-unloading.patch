From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 19 May 2024 18:20:55 +0900
Subject: [PATCH] Chunk unloading


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index 140bff5cbb948116fc63a31dba4b895d47a5e98e..f73e4be75786d774eb4374567a34472d23f607d7 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -38,6 +38,8 @@ import net.minecraft.world.level.ChunkPos;
 import org.bukkit.plugin.Plugin;
 import org.slf4j.Logger;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.region.LevelChunkRegion;
+import puregero.multipaper.threading.MultiPaperTickThread;
 import puregero.multipaper.util.SimpleStampedLock;
 
 import java.io.IOException;
@@ -71,7 +73,7 @@ public final class ChunkHolderManager {
 
     private final ConcurrentHashMap<RegionFileIOThread.ChunkCoordinate, SortedArraySet<Ticket<?>>> tickets = new java.util.concurrent.ConcurrentHashMap<>();
     private final ConcurrentHashMap<RegionFileIOThread.ChunkCoordinate, Long2IntOpenHashMap> sectionToChunkToExpireCount = new java.util.concurrent.ConcurrentHashMap<>();
-    final ChunkQueue unloadQueue;
+    // final ChunkQueue unloadQueue; // MultiPaper - use our own unload queue
 
     public boolean processTicketUpdates(final int posX, final int posZ) {
         final int ticketShift = ThreadedTicketLevelPropagator.SECTION_SHIFT;
@@ -142,7 +144,7 @@ public final class ChunkHolderManager {
         this.world = world;
         this.taskScheduler = taskScheduler;
         this.ticketLockArea = new ReentrantAreaLock(taskScheduler.getChunkSystemLockShift());
-        this.unloadQueue = new ChunkQueue(world.getRegionChunkShift());
+        // this.unloadQueue = new ChunkQueue(world.getRegionChunkShift()); // MultiPaper - use our own unload queue
     }
 
     private final AtomicLong statusUpgradeId = new AtomicLong();
@@ -1076,89 +1078,102 @@ public final class ChunkHolderManager {
     }
 
     // note: never call while inside the chunk system, this will absolutely break everything
-    public void processUnloads() {
+    public void processUnloads(LevelChunkRegion region) { // MultiPaper
+        if (region.unloadQueue.isEmpty()) return; // MultiPaper
+
         TickThread.ensureTickThread("Cannot unload chunks off-main");
 
         if (BLOCK_TICKET_UPDATES.get() == Boolean.TRUE) {
             throw new IllegalStateException("Cannot unload chunks recursively");
         }
-        final int sectionShift = this.unloadQueue.coordinateShift; // sectionShift <= lock shift
-        final List<ChunkQueue.SectionToUnload> unloadSectionsForRegion = this.unloadQueue.retrieveForAllRegions();
-        int unloadCountTentative = 0;
-        for (final ChunkQueue.SectionToUnload sectionRef : unloadSectionsForRegion) {
-            final ChunkQueue.UnloadSection section
-                = this.unloadQueue.getSectionUnsynchronized(sectionRef.sectionX(), sectionRef.sectionZ());
-
-            if (section == null) {
-                // removed concurrently
-                continue;
-            }
-
-            // technically reading the size field is unsafe, and it may be incorrect.
-            // We assume that the error here cumulatively goes away over many ticks. If it did not, then it is possible
-            // for chunks to never unload or not unload fast enough.
-            unloadCountTentative += section.chunks.size();
-        }
-
-        if (unloadCountTentative <= 0) {
-            // no work to do
-            return;
-        }
+//        final int sectionShift = this.unloadQueue.coordinateShift; // sectionShift <= lock shift
+//        final List<ChunkQueue.SectionToUnload> unloadSectionsForRegion = this.unloadQueue.retrieveForAllRegions();
+//        int unloadCountTentative = 0;
+//        for (final ChunkQueue.SectionToUnload sectionRef : unloadSectionsForRegion) {
+//            final ChunkQueue.UnloadSection section
+//                = this.unloadQueue.getSectionUnsynchronized(sectionRef.sectionX(), sectionRef.sectionZ());
+//
+//            if (section == null) {
+//                // removed concurrently
+//                continue;
+//            }
+//
+//            // technically reading the size field is unsafe, and it may be incorrect.
+//            // We assume that the error here cumulatively goes away over many ticks. If it did not, then it is possible
+//            // for chunks to never unload or not unload fast enough.
+//            unloadCountTentative += section.chunks.size();
+//        }
+//
+//        if (unloadCountTentative <= 0) {
+//            // no work to do
+//            return;
+//        }
 
         // Note: The behaviour that we process ticket updates while holding the lock has been dropped here, as it is racey behavior.
         // But, we do need to process updates here so that any add ticket that is synchronised before this call does not go missed.
         this.processTicketUpdates();
 
-        final int toUnloadCount = Math.max(50, (int)(unloadCountTentative * 0.05));
+        final int toUnloadCount = 50; // Math.max(50, (int)(unloadCountTentative * 0.05)); // MultiPaper
         int processedCount = 0;
 
-        for (final ChunkQueue.SectionToUnload sectionRef : unloadSectionsForRegion) {
+//        for (final ChunkQueue.SectionToUnload sectionRef : unloadSectionsForRegion) {
             final List<NewChunkHolder> stage1 = new ArrayList<>();
             final List<NewChunkHolder.UnloadState> stage2 = new ArrayList<>();
 
-            final int sectionLowerX = sectionRef.sectionX() << sectionShift;
-            final int sectionLowerZ = sectionRef.sectionZ() << sectionShift;
+            final int sectionLowerX = region.getRegionPos().getLowerChunkX(); // sectionRef.sectionX() << sectionShift; // MultiPaper
+            final int sectionLowerZ = region.getRegionPos().getLowerChunkZ(); // sectionRef.sectionZ() << sectionShift; // MultiPaper
 
             // stage 1: set up for stage 2 while holding critical locks
             ReentrantAreaLock.Node ticketLock = this.ticketLockArea.lock(sectionLowerX, sectionLowerZ);
             try {
                 final ReentrantAreaLock.Node scheduleLock = this.taskScheduler.schedulingLockArea.lock(sectionLowerX, sectionLowerZ);
                 try {
-                    final ChunkQueue.UnloadSection section
-                        = this.unloadQueue.getSectionUnsynchronized(sectionRef.sectionX(), sectionRef.sectionZ());
-
-                    if (section == null) {
-                        // removed concurrently
-                        continue;
-                    }
-
-                    // collect the holders to run stage 1 on
-                    final int sectionCount = section.chunks.size();
 
-                    if ((sectionCount + processedCount) <= toUnloadCount) {
-                        // we can just drain the entire section
-
-                        for (final LongIterator iterator = section.chunks.iterator(); iterator.hasNext();) {
-                            final NewChunkHolder holder = this.chunkHolders.get(iterator.nextLong());
-                            if (holder == null) {
-                                throw new IllegalStateException();
-                            }
-                            stage1.add(holder);
-                        }
-
-                        // remove section
-                        this.unloadQueue.removeSection(sectionRef.sectionX(), sectionRef.sectionZ());
-                    } else {
-                        // processedCount + len = toUnloadCount
-                        // we cannot drain the entire section
-                        for (int i = 0, len = toUnloadCount - processedCount; i < len; ++i) {
-                            final NewChunkHolder holder = this.chunkHolders.get(section.chunks.removeFirstLong());
-                            if (holder == null) {
-                                throw new IllegalStateException();
-                            }
-                            stage1.add(holder);
+                    // MultiPaper start
+                    while (processedCount < toUnloadCount && !region.unloadQueue.isEmpty()) {
+                        final NewChunkHolder holder = this.chunkHolders.get(region.unloadQueue.removeFirstLong());
+                        if (holder == null) {
+                            continue;
                         }
+                        stage1.add(holder);
+                        processedCount++;
                     }
+                    // MultiPaper end
+//                    final ChunkQueue.UnloadSection section
+//                        = this.unloadQueue.getSectionUnsynchronized(sectionRef.sectionX(), sectionRef.sectionZ());
+//
+//                    if (section == null) {
+//                        // removed concurrently
+//                        continue;
+//                    }
+//
+//                    // collect the holders to run stage 1 on
+//                    final int sectionCount = section.chunks.size();
+//
+//                    if ((sectionCount + processedCount) <= toUnloadCount) {
+//                        // we can just drain the entire section
+//
+//                        for (final LongIterator iterator = section.chunks.iterator(); iterator.hasNext();) {
+//                            final NewChunkHolder holder = this.chunkHolders.get(iterator.nextLong());
+//                            if (holder == null) {
+//                                throw new IllegalStateException();
+//                            }
+//                            stage1.add(holder);
+//                        }
+//
+//                        // remove section
+//                        this.unloadQueue.removeSection(sectionRef.sectionX(), sectionRef.sectionZ());
+//                    } else {
+//                        // processedCount + len = toUnloadCount
+//                        // we cannot drain the entire section
+//                        for (int i = 0, len = toUnloadCount - processedCount; i < len; ++i) {
+//                            final NewChunkHolder holder = this.chunkHolders.get(section.chunks.removeFirstLong());
+//                            if (holder == null) {
+//                                throw new IllegalStateException();
+//                            }
+//                            stage1.add(holder);
+//                        }
+//                    }
 
                     // run stage 1
                     for (int i = 0, len = stage1.size(); i < len; ++i) {
@@ -1220,12 +1235,12 @@ public final class ChunkHolderManager {
                 this.ticketLockArea.unlock(ticketLock);
             }
 
-            processedCount += stage1.size();
+//            processedCount += stage1.size();
 
-            if (processedCount >= toUnloadCount) {
-                break;
-            }
-        }
+//            if (processedCount >= toUnloadCount) {
+//                break;
+//            }
+//        }
     }
 
     public enum TicketOperationType {
@@ -1426,31 +1441,31 @@ public final class ChunkHolderManager {
         ret.addProperty("current_tick", Long.valueOf(this.currentTick));
 
         final JsonArray unloadQueue = new JsonArray();
-        ret.add("unload_queue", unloadQueue);
+//        ret.add("unload_queue", unloadQueue); // MultiPaper - removed unloadQueue
         ret.addProperty("lock_shift", Integer.valueOf(this.taskScheduler.getChunkSystemLockShift()));
         ret.addProperty("ticket_shift", Integer.valueOf(ThreadedTicketLevelPropagator.SECTION_SHIFT));
         ret.addProperty("region_shift", Integer.valueOf(this.world.getRegionChunkShift()));
-        for (final ChunkQueue.SectionToUnload section : this.unloadQueue.retrieveForAllRegions()) {
-            final JsonObject sectionJson = new JsonObject();
-            unloadQueue.add(sectionJson);
-            sectionJson.addProperty("sectionX", section.sectionX());
-            sectionJson.addProperty("sectionZ", section.sectionX());
-            sectionJson.addProperty("order", section.order());
-
-            final JsonArray coordinates = new JsonArray();
-            sectionJson.add("coordinates", coordinates);
-
-            final ChunkQueue.UnloadSection actualSection = this.unloadQueue.getSectionUnsynchronized(section.sectionX(), section.sectionZ());
-            for (final LongIterator iterator = actualSection.chunks.iterator(); iterator.hasNext();) {
-                final long coordinate = iterator.nextLong();
-
-                final JsonObject coordinateJson = new JsonObject();
-                coordinates.add(coordinateJson);
-
-                coordinateJson.addProperty("chunkX", Integer.valueOf(CoordinateUtils.getChunkX(coordinate)));
-                coordinateJson.addProperty("chunkZ", Integer.valueOf(CoordinateUtils.getChunkZ(coordinate)));
-            }
-        }
+//        for (final ChunkQueue.SectionToUnload section : this.unloadQueue.retrieveForAllRegions()) { // MultiPaper - removed unloadQueue
+//            final JsonObject sectionJson = new JsonObject();
+//            unloadQueue.add(sectionJson);
+//            sectionJson.addProperty("sectionX", section.sectionX());
+//            sectionJson.addProperty("sectionZ", section.sectionX());
+//            sectionJson.addProperty("order", section.order());
+//
+//            final JsonArray coordinates = new JsonArray();
+//            sectionJson.add("coordinates", coordinates);
+//
+//            final ChunkQueue.UnloadSection actualSection = this.unloadQueue.getSectionUnsynchronized(section.sectionX(), section.sectionZ());
+//            for (final LongIterator iterator = actualSection.chunks.iterator(); iterator.hasNext();) {
+//                final long coordinate = iterator.nextLong();
+//
+//                final JsonObject coordinateJson = new JsonObject();
+//                coordinates.add(coordinateJson);
+//
+//                coordinateJson.addProperty("chunkX", Integer.valueOf(CoordinateUtils.getChunkX(coordinate)));
+//                coordinateJson.addProperty("chunkZ", Integer.valueOf(CoordinateUtils.getChunkZ(coordinate)));
+//            }
+//        }
 
         final JsonArray holders = new JsonArray();
         ret.add("chunkholders", holders);
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index 604de7aed6db44c9c84d541765e57da48883cf00..45bca2195a35861d04635fdadd16e0bb9b85265f 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -36,12 +36,15 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
 import org.slf4j.Logger;
+import puregero.multipaper.region.RegionPos;
+
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 
@@ -732,10 +735,10 @@ public final class NewChunkHolder {
         }
         if (this.isSafeToUnload() == null) {
             // ensure in unload queue
-            this.scheduler.chunkHolderManager.unloadQueue.addChunk(this.chunkX, this.chunkZ);
+            world.chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(vanillaChunkHolder.pos)).unloadQueue.add(vanillaChunkHolder.pos.longKey); // this.scheduler.chunkHolderManager.unloadQueue.addChunk(this.chunkX, this.chunkZ); // MultiPaper
         } else {
             // ensure not in unload queue
-            this.scheduler.chunkHolderManager.unloadQueue.removeChunk(this.chunkX, this.chunkZ);
+            Optional.ofNullable(world.chunkSource.tickingRegions.get(RegionPos.forChunk(vanillaChunkHolder.pos))).ifPresent(v -> v.unloadQueue.remove(vanillaChunkHolder.pos.longKey)); // this.scheduler.chunkHolderManager.unloadQueue.removeChunk(this.chunkX, this.chunkZ); // MultiPaper
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 345f143b0eeb77acb96e4bc716f3b23782ac782f..a97f6b6646c31ee8879223a202b83a5662024d04 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -562,7 +562,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     private void processUnloads(BooleanSupplier shouldKeepTicking) {
-        this.level.chunkTaskScheduler.chunkHolderManager.processUnloads(); // Paper - rewrite chunk system
+        // this.level.chunkTaskScheduler.chunkHolderManager.processUnloads(); // Paper - rewrite chunk system // MultiPaper - we unload chunks on the chunk thread
 
     }
 
diff --git a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
index e16024658f7ad8381b6c466f5fc55441b792ea60..d8e257164815036fe65bba7377cbc0de90921750 100644
--- a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
+++ b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
@@ -1,6 +1,7 @@
 package puregero.multipaper.region;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQueue;
+import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import net.minecraft.server.level.ServerLevel;
@@ -23,6 +24,7 @@ public class LevelChunkRegion {
     private final PrioritisedThreadedTaskQueue internalTasks = new PrioritisedThreadedTaskQueue();
     private final ObjectOpenHashSet<Mob> navigatingMobs = new ObjectOpenHashSet<>();
     private final ObjectOpenHashSet<ServerPlayer> players = new ObjectOpenHashSet<>();
+    public final LongLinkedOpenHashSet unloadQueue = new LongLinkedOpenHashSet();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -110,6 +112,7 @@ public class LevelChunkRegion {
 
     public boolean isEmpty() {
         return levelChunks.isEmpty() && scheduledTasks.isEmpty() && internalTasks.getTotalTasksExecuted() >= internalTasks.getTotalTasksScheduled() && navigatingMobs.isEmpty()
-                && players.isEmpty();
+                && players.isEmpty()
+                && unloadQueue.isEmpty();
     }
 }
diff --git a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
index f6a12adfbc11a5449d089bcb1bbf1d5b992f4c36..e8cdaa02648e4352c5ceb8b10a19baf29d51c879 100644
--- a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
+++ b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
@@ -53,6 +53,8 @@ public class MultiPaperChunkTicker {
 
         while (region.getInternalTaskQueue().executeTask());
 
+        level.chunkTaskScheduler.chunkHolderManager.processUnloads(region);
+
         region.tickTasks();
         region.forEach(chunk -> _tickChunk(level, chunk, spawnercreature_d));
 

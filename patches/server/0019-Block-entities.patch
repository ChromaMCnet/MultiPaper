From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 02:10:04 +0900
Subject: [PATCH] Block entities


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8534e378cc9edf232cb58ff8d2a3723c85033b74..f7f51b82d5140222ebaf1ee4e29db53b258f1db3 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -949,7 +949,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             //this.timings.entityTick.stopTiming(); // Spigot // Purpur
             //this.timings.tickEntities.stopTiming(); // Spigot // Purpur
             //gameprofilerfiller.pop(); // Purpur
-            this.tickBlockEntities();
+            // this.tickBlockEntities(); // MultiPaper - handled locally in the region
         }
 
         //gameprofilerfiller.push("entityManagement"); // Purpur
@@ -2378,7 +2378,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
 
             bufferedwriter.write(String.format(Locale.ROOT, "entities: %s\n", this.entityLookup.getDebugInfo())); // Paper - rewrite chunk system
-            bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.blockEntityTickers.size()));
+            // bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.blockEntityTickers.size())); // MultiPaper - removed blockEntityTickers
             bufferedwriter.write(String.format(Locale.ROOT, "block_ticks: %d\n", this.getBlockTicks().count()));
             bufferedwriter.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", this.getFluidTicks().count()));
             bufferedwriter.write("distance_manager: " + playerchunkmap.getDistanceManager().getDebugStatus() + "\n");
@@ -2524,14 +2524,16 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     private void dumpBlockEntityTickers(Writer writer) throws IOException {
         CsvOutput csvwriter = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("type").build(writer);
-        Iterator iterator = this.blockEntityTickers.iterator();
-
-        while (iterator.hasNext()) {
-            TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
-            BlockPos blockposition = tickingblockentity.getPos();
-
-            csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
-        }
+        // MultiPaper start - removed blockEntityTickers
+//        Iterator iterator = this.blockEntityTickers.iterator();
+//
+//        while (iterator.hasNext()) {
+//            TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
+//            BlockPos blockposition = tickingblockentity.getPos();
+//
+//            csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
+//        }
+        // MultiPaper end - removed blockEntityTickers
 
     }
 
@@ -2591,7 +2593,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     public String getWatchdogStats() {
         return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.players.size(), this.entityLookup.getDebugInfo(), ServerLevel.getTypeCount(this.entityLookup.getAll(), (entity) -> { // Paper - rewrite chunk system
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
-        }), this.blockEntityTickers.size(), ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType), this.getBlockTicks().count(), this.getFluidTicks().count(), this.gatherChunkSourceStats());
+        }), 0 /*this.blockEntityTickers.size()*/, "" /*ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType)*/, this.getBlockTicks().count(), this.getFluidTicks().count(), this.gatherChunkSourceStats()); // MultiPaper - removed blockEntityTickers
     }
 
     private static <T> String getTypeCount(Iterable<T> items, Function<T, String> classifier) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e6c3a7367999e9a8d3fe7c53c38953490319aeca..5b029a1e31c1731da03f340780a7df605a8b06c6 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -6,6 +6,7 @@ import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
+import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -99,6 +100,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
+import puregero.multipaper.region.RegionPos;
 import puregero.multipaper.threading.PerThreadNeighborUpdater;
 // CraftBukkit end
 
@@ -115,9 +117,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public
+    // public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public // MultiPaper - handled locally in the region
     protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    // private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList(); // MultiPaper - handled locally in the region
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -176,7 +178,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
-    private int tileTickPosition;
+    // private int tileTickPosition; // MultiPaper - removed tileTickPosition
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Faster redstone torch rapid clock removal; Move from Map in BlockRedstoneTorch to here
 
@@ -1291,18 +1293,19 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public void addBlockEntityTicker(TickingBlockEntity ticker) {
-        (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
+        ((ServerLevel) this).chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(new ChunkPos(ticker.getPos()))).pendingBlockEntityTickers.add(ticker); // MultiPaper
+//        (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker); // MultiPaper
     }
 
-    protected void tickBlockEntities() {
+    public void tickBlockEntities(List<TickingBlockEntity> blockEntityTickers, List<TickingBlockEntity> pendingBlockEntityTickers) { // MultiPaper
         //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
 
         //gameprofilerfiller.push("blockEntities"); // Purpur
         //this.timings.tileEntityPending.startTiming(); // Spigot // Purpur
         this.tickingBlockEntities = true;
-        if (!this.pendingBlockEntityTickers.isEmpty()) {
-            this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
-            this.pendingBlockEntityTickers.clear();
+        if (!pendingBlockEntityTickers.isEmpty()) { // MultiPaper
+            blockEntityTickers.addAll(pendingBlockEntityTickers); // MultiPaper
+            pendingBlockEntityTickers.clear(); // MultiPaper
         }
         //this.timings.tileEntityPending.stopTiming(); // Spigot // Purpur
 
@@ -1314,9 +1317,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         int tilesThisCycle = 0;
         var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll
         toRemove.add(null); // Paper - Fix MC-117075
-        for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
-            this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
-            TickingBlockEntity tickingblockentity = (TickingBlockEntity) this.blockEntityTickers.get(this.tileTickPosition);
+        for (int tileTickPosition = 0; tileTickPosition < blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters // MultiPaper
+            tileTickPosition = (tileTickPosition < blockEntityTickers.size()) ? tileTickPosition : 0; // MultiPaper
+            TickingBlockEntity tickingblockentity = (TickingBlockEntity) blockEntityTickers.get(tileTickPosition); // MultiPaper
             // Spigot end
 
             if (tickingblockentity.isRemoved()) {
@@ -1327,17 +1330,17 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             } else if (flag && this.shouldTickBlocksAt(tickingblockentity.getPos())) {
                 tickingblockentity.tick();
                 // Paper start - execute chunk tasks during tick
-                if ((this.tileTickPosition & 7) == 0) {
+                if ((tileTickPosition & 7) == 0) { // MultiPaper
                     MinecraftServer.getServer().executeMidTickTasks();
                 }
                 // Paper end - execute chunk tasks during tick
             }
         }
-        this.blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075
+        blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075 // MultiPaper
 
         //this.timings.tileEntityTick.stopTiming(); // Spigot // Purpur
         this.tickingBlockEntities = false;
-        co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper
+        co.aikar.timings.TimingHistory.tileEntityTicks += blockEntityTickers.size(); // Paper // MultiPaper
         //gameprofilerfiller.pop(); // Purpur
         this.spigotConfig.currentPrimedTnt = 0; // Spigot
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 226ff7c6048b510be2e71ecc5d5ff3581092aa5e..aef9a80b3beffc0fe6dbfac9b24989a80e98c25d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -193,7 +193,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public int getTickableTileEntityCount() {
-        return world.blockEntityTickers.size();
+        return 0; // world.blockEntityTickers.size(); // MultiPaper - removed blockEntityTickers
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
index d8e257164815036fe65bba7377cbc0de90921750..8b4824609f7748f4341607b70dcd0f1ce97e8bae 100644
--- a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
+++ b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
@@ -4,9 +4,11 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQu
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
@@ -25,6 +27,8 @@ public class LevelChunkRegion {
     private final ObjectOpenHashSet<Mob> navigatingMobs = new ObjectOpenHashSet<>();
     private final ObjectOpenHashSet<ServerPlayer> players = new ObjectOpenHashSet<>();
     public final LongLinkedOpenHashSet unloadQueue = new LongLinkedOpenHashSet();
+    public List<TickingBlockEntity> tickingBlockEntities = new ReferenceArrayList<>();
+    public List<TickingBlockEntity> pendingBlockEntityTickers = new ReferenceArrayList<>();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
diff --git a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
index e8cdaa02648e4352c5ceb8b10a19baf29d51c879..21042d0412846794ae20e233e7accb52177d110f 100644
--- a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
+++ b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
@@ -58,6 +58,8 @@ public class MultiPaperChunkTicker {
         region.tickTasks();
         region.forEach(chunk -> _tickChunk(level, chunk, spawnercreature_d));
 
+        level.tickBlockEntities(region.tickingBlockEntities, region.pendingBlockEntityTickers);
+
         level.blockTicks.tick(region.getRegionPos(), level.getGameTime(), level.paperConfig().environment.maxBlockTicks, level::tickBlock);
         level.fluidTicks.tick(region.getRegionPos(), level.getGameTime(), level.paperConfig().environment.maxBlockTicks, level::tickFluid);
 

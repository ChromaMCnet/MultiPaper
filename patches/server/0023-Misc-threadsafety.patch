From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 13:58:42 +0900
Subject: [PATCH] Misc threadsafety


diff --git a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
index 41b9405d6759d865e0d14dd4f95163e9690e967d..888813d162408a05c33bf7b5931afe29dd082405 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
@@ -203,7 +203,7 @@ public abstract class AreaMap<E> {
         }
     }
 
-    private void addObjectTo(final E object, final int chunkX, final int chunkZ, final int currChunkX,
+    private synchronized void addObjectTo(final E object, final int chunkX, final int chunkZ, final int currChunkX, // MultiPaper - synchronized
                              final int currChunkZ, final int prevChunkX, final int prevChunkZ) {
         final long key = MCUtil.getCoordinateKey(chunkX, chunkZ);
 
@@ -235,7 +235,7 @@ public abstract class AreaMap<E> {
         }
     }
 
-    private void removeObjectFrom(final E object, final int chunkX, final int chunkZ, final int currChunkX,
+    private synchronized void removeObjectFrom(final E object, final int chunkX, final int chunkZ, final int currChunkX, // MultiPaper - synchronized
                                   final int currChunkZ, final int prevChunkX, final int prevChunkZ) {
         final long key = MCUtil.getCoordinateKey(chunkX, chunkZ);
 
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
index e51104e65a07b6ea7bbbcbb6afb066ef6401cc5b..318c572fc430115f81ef19ccfdd1f9f5356e1c88 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
@@ -24,7 +24,7 @@ public class PooledLinkedHashSets<E> {
         return;
     }
 
-    public PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public synchronized PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) { // MultiPaper - synchronized
         final PooledObjectLinkedOpenHashSet<E> cached = current.getAddCache(object);
 
         if (cached != null) {
@@ -76,7 +76,7 @@ public class PooledLinkedHashSets<E> {
     }
 
     // rets null if current.size() == 1
-    public PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public synchronized PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) { // MultiPaper - synchronized
         if (current.set.size() == 1) {
             decrementReferenceCount(current);
             return null;
diff --git a/src/main/java/net/minecraft/server/level/PlayerMap.java b/src/main/java/net/minecraft/server/level/PlayerMap.java
index 12f1345ff70388fb217100bfc717ef861785381d..500306eea8bb92a0987d6242821c910c25b1e453 100644
--- a/src/main/java/net/minecraft/server/level/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerMap.java
@@ -2,36 +2,47 @@ package net.minecraft.server.level;
 
 import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
+import puregero.multipaper.util.SimpleStampedLock;
+
+import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public final class PlayerMap {
     private final Object2BooleanMap<ServerPlayer> players = new Object2BooleanOpenHashMap<>();
-
-    public Set<ServerPlayer> getAllPlayers() {
-        return this.players.keySet();
+    private final SimpleStampedLock playersLock = new SimpleStampedLock(); // MultiPaper
+    private final CopyOnWriteArrayList<ServerPlayer> playersList = new CopyOnWriteArrayList<>(); // MultiPaper
+
+    public List<ServerPlayer> getAllPlayers() { // MultiPaper
+        // MultiPaper - change to a CopyOnWriteArrayList cache of the player key set to allow for thread-safe iteration
+        //  - Players aren't added/removed often, so a CopyOnWriteArrayList is sufficient
+        // return this.players.keySet(); // MultiPaper
+        return this.playersList; // MultiPaper
     }
 
     public void addPlayer(ServerPlayer player, boolean inactive) {
-        this.players.put(player, inactive);
+        this.playersLock.write(() -> this.players.put(player, inactive)); // MultiPaper
+        this.playersList.add(player); // MultiPaper
     }
 
     public void removePlayer(ServerPlayer player) {
-        this.players.removeBoolean(player);
+        this.playersLock.write(() -> this.players.removeBoolean(player)); // MultiPaper
+        this.playersList.remove(player); // MultiPaper
     }
 
     public void ignorePlayer(ServerPlayer player) {
-        this.players.replace(player, true);
+        this.playersLock.write(() -> this.players.replace(player, true)); // MultiPaper
     }
 
     public void unIgnorePlayer(ServerPlayer player) {
-        this.players.replace(player, false);
+        this.playersLock.write(() -> this.players.replace(player, false)); // MultiPaper
     }
 
     public boolean ignoredOrUnknown(ServerPlayer player) {
-        return this.players.getOrDefault(player, true);
+        return this.playersLock.optimisticRead(() -> this.players.getOrDefault(player, true)); // MultiPaper
     }
 
     public boolean ignored(ServerPlayer player) {
-        return this.players.getBoolean(player);
+        return this.playersLock.optimisticRead(() -> this.players.getBoolean(player)); // MultiPaper
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index c6f193339fdcbcc938d4eafdcad0b112cf1698d5..256fbdc2a287a8232c8ecb9d0e06290a141a49ee 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -49,7 +49,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return POI_DATA_SOURCE - level;
     }
 
-    protected void updateDistanceTracking(long section) {
+    protected synchronized void updateDistanceTracking(long section) {
         if (this.isVillageCenter(section)) {
             this.villageDistanceTracker.setSource(section, POI_DATA_SOURCE);
         } else {
@@ -228,7 +228,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return this.getOrLoad(SectionPos.asLong(pos)).map(poiSet -> poiSet.getFreeTickets(pos)).orElse(0);
     }
 
-    public int sectionsToVillage(SectionPos pos) {
+    public synchronized int sectionsToVillage(SectionPos pos) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking util
         return convertBetweenLevels(this.villageDistanceTracker.getLevel(io.papermc.paper.util.CoordinateUtils.getChunkSectionKey(pos))); // Paper - replace distance tracking util
     }
@@ -243,7 +243,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     }
 
     @Override
-    public void tick(BooleanSupplier shouldKeepTicking) {
+    public synchronized void tick(BooleanSupplier shouldKeepTicking) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index 81dd0aa6a90fd9dda9e7752f85b9cf4568e3b575..e9a517404bba7363e254555b043236692bf5794d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -45,9 +45,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
     // Paper end - Fix NPE in SculkBloomEvent world access
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, SculkCatalystBlockEntity blockEntity) {
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = blockEntity.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.set(blockEntity.getBlockPos()); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // MultiPaper - use thread local
         blockEntity.catalystListener.getSculkSpreader().updateCursors(world, pos, world.getRandom(), true);
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.remove(); // CraftBukkit // MultiPaper - use thread local
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 031fc626d2075cbe0941fecc188406712ab9953f..1ac2b3e091be5b3c2a3d37a35c3a18642aa0d06f 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -3,6 +3,7 @@ package net.minecraft.world.level.block.state;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import java.util.Arrays;
 import java.util.Collections;
@@ -162,11 +163,11 @@ public abstract class BlockBehaviour implements FeatureElement {
     // Paper end - UseOnContext param
 
     protected void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block onPlace"); // Spigot // MultiPaper
     }
 
     protected void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
-        org.spigotmc.AsyncCatcher.catchOp("block remove"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block remove"); // Spigot // MultiPaper
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index b452ebbe11145987fb5e66b39993898457322080..c499b51ff28e597d2eff16a8c2395441b63f375c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,6 +9,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -516,7 +518,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Paper
+        TickThread.ensureTickThread(this.getHandle(), "effect add"); // Paper // MultiPaper
         this.getHandle().addEffect(org.bukkit.craftbukkit.potion.CraftPotionUtil.fromBukkit(effect), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 241340a6d66f17f2a31fb03ff0dfab121b856368..581ead183b59369fe32f973167f23fe58c1d5809 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -6,6 +6,7 @@ import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.io.ByteArrayOutputStream;
@@ -3489,7 +3490,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start - Add chunk view API
     @Override
     public Set<java.lang.Long> getSentChunkKeys() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // MultiPaper
         return it.unimi.dsi.fastutil.longs.LongSets.unmodifiable(
             this.getHandle().chunkLoader.getSentChunksRaw().clone()
         );
@@ -3497,7 +3498,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public Set<org.bukkit.Chunk> getSentChunks() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // MultiPaper
         final it.unimi.dsi.fastutil.longs.LongOpenHashSet rawChunkKeys = this.getHandle().chunkLoader.getSentChunksRaw();
         final it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<org.bukkit.Chunk> chunks = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(rawChunkKeys.size());
         final org.bukkit.World world = this.getWorld();
@@ -3510,7 +3511,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean isChunkSent(final long chunkKey) {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // MultiPaper
         return this.getHandle().chunkLoader.getSentChunksRaw().contains(chunkKey);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index e650b85464ac886b4adb1a8924026d34f805aba6..a647edf62f5ef5d0123394215a5146898e3c887a 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -951,7 +951,7 @@ public class CraftEventFactory {
         return CraftEventFactory.handleBlockSpreadEvent(world, source, target, block, 2);
     }
 
-    public static BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+    public static ThreadLocal<BlockPos> sourceBlockOverride = ThreadLocal.withInitial(() -> null); // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // MultiPaper - use thread local
 
     public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block, int flag) {
         // Suppress during worldgen
@@ -963,7 +963,7 @@ public class CraftEventFactory {
         CraftBlockState state = CraftBlockStates.getBlockState(world, target, flag);
         state.setData(block);
 
-        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride != null ? CraftEventFactory.sourceBlockOverride : source), state);
+        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride.get() != null ? CraftEventFactory.sourceBlockOverride.get() : source), state); // MultiPaper - use thread local
         Bukkit.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {

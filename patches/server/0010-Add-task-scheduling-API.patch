From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 5 May 2024 23:21:04 +0900
Subject: [PATCH] Add task scheduling API


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index e1ffd62f4ebceecb9bc5471df3da406cffea0483..140bff5cbb948116fc63a31dba4b895d47a5e98e 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -37,6 +37,9 @@ import net.minecraft.util.Unit;
 import net.minecraft.world.level.ChunkPos;
 import org.bukkit.plugin.Plugin;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.util.SimpleStampedLock;
+
 import java.io.IOException;
 import java.text.DecimalFormat;
 import java.util.ArrayDeque;
@@ -113,6 +116,7 @@ public final class ChunkHolderManager {
     private long currentTick;
 
     private final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = new ArrayDeque<>();
+    private final SimpleStampedLock autoSaveQueueLock = new SimpleStampedLock(); // MultiPaper - multithread-safe auto save queue
     private final ObjectRBTreeSet<NewChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((final NewChunkHolder c1, final NewChunkHolder c2) -> {
         if (c1 == c2) {
             return 0;
@@ -204,9 +208,9 @@ public final class ChunkHolderManager {
     }
 
     void ensureInAutosave(final NewChunkHolder holder) {
-        if (!this.autoSaveQueue.contains(holder)) {
+        if (!this.autoSaveQueueLock.optimisticRead(() -> this.autoSaveQueue.contains(holder))) { // MultiPaper - multithread-safe auto save queue
             holder.lastAutoSave = MinecraftServer.currentTick;
-            this.autoSaveQueue.add(holder);
+            this.autoSaveQueueLock.write(() -> this.autoSaveQueue.add(holder)); // MultiPaper - multithread-safe auto save queue
         }
     }
 
@@ -214,30 +218,40 @@ public final class ChunkHolderManager {
         final List<NewChunkHolder> reschedule = new ArrayList<>();
         final long currentTick = MinecraftServer.currentTickLong;
         final long maxSaveTime = currentTick - this.world.paperConfig().chunks.autoSaveInterval.value();
-        for (int autoSaved = 0; autoSaved < this.world.paperConfig().chunks.maxAutoSaveChunksPerTick && !this.autoSaveQueue.isEmpty();) {
-            final NewChunkHolder holder = this.autoSaveQueue.first();
+        for (int autoSaved = 0; autoSaved < this.world.paperConfig().chunks.maxAutoSaveChunksPerTick;) { // MultiPaper - multithread-safe auto save queue
+            final NewChunkHolder holder = this.autoSaveQueueLock.optimisticRead(() -> this.autoSaveQueue.isEmpty() ? null : this.autoSaveQueue.first()); // MultiPaper - multithread-safe auto save queue
+
+            if (holder == null) break; // MultiPaper - multithread-safe auto save queue
 
             if (holder.lastAutoSave > maxSaveTime) {
                 break;
             }
 
-            this.autoSaveQueue.remove(holder);
+            this.autoSaveQueueLock.write(() -> this.autoSaveQueue.remove(holder)); // MultiPaper - multithread-safe auto save queue
 
             holder.lastAutoSave = currentTick;
-            if (holder.save(false, false) != null) {
-                ++autoSaved;
-            }
+            // MultiPaper start - run on chunk's thread
+            MultiPaper.runSync(holder.world, new ChunkPos(holder.chunkX, holder.chunkZ), () -> {
+                holder.save(false, false);
+            });
+            ++autoSaved;
+            // if (holder.save(false, false) != null) {
+            //    ++autoSaved;
+            // }
+            // MultiPaper end - run on chunk's thread
 
             if (holder.getChunkStatus().isOrAfter(FullChunkStatus.FULL)) {
                 reschedule.add(holder);
             }
         }
 
+        this.autoSaveQueueLock.write(() -> { // MultiPaper - multithread-safe auto save queue
         for (final NewChunkHolder holder : reschedule) {
             if (holder.getChunkStatus().isOrAfter(FullChunkStatus.FULL)) {
                 this.autoSaveQueue.add(holder);
             }
         }
+        }); // MultiPaper - multithread-safe auto save queue
     }
 
     public void saveAllChunks(final boolean flush, final boolean shutdown, final boolean logProgress) {
@@ -1024,6 +1038,16 @@ public final class ChunkHolderManager {
         if (changedFullStatus.isEmpty()) {
             return;
         }
+        // MultiPaper start
+        for (NewChunkHolder chunkHolder : changedFullStatus) {
+            this.taskScheduler.scheduleChunkTask(chunkHolder.chunkX, chunkHolder.chunkZ, () -> {
+                List<NewChunkHolder> newChangedFullStatus = new ArrayList<>();
+                chunkHolder.handleFullStatusChange(newChangedFullStatus);
+                addChangedStatuses(newChangedFullStatus);
+            });
+        }
+        if (true) return;
+        // MultiPaper end
         if (!TickThread.isTickThread()) {
             this.taskScheduler.scheduleChunkTask(() -> {
                 final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = ChunkHolderManager.this.pendingFullLoadUpdate;
@@ -1044,7 +1068,7 @@ public final class ChunkHolderManager {
     private void removeChunkHolder(final NewChunkHolder holder) {
         holder.killed = true;
         holder.vanillaChunkHolder.onChunkRemove();
-        this.autoSaveQueue.remove(holder);
+        this.autoSaveQueueLock.write(() -> this.autoSaveQueue.remove(holder)); // MultiPaper - multithread-safe auto save queue
         ChunkSystem.onChunkHolderDelete(this.world, holder.vanillaChunkHolder);
         synchronized (this.chunkHolders) {
             this.chunkHolders.remove(CoordinateUtils.getChunkKey(holder.chunkX, holder.chunkZ));
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index 049e20407033073b06fcdeb46c38485f4926d778..c7fdea820341ac116255e3cd8a9d5e28edf0e9aa 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -11,6 +11,8 @@ import io.papermc.paper.chunk.system.scheduling.queue.RadiusAwarePrioritisedExec
 import io.papermc.paper.configuration.GlobalConfiguration;
 import io.papermc.paper.util.CoordinateUtils;
 import io.papermc.paper.util.TickThread;
+
+import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -27,6 +29,10 @@ import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import org.bukkit.Bukkit;
 import org.slf4j.Logger;
+import puregero.multipaper.region.LevelChunkRegion;
+import puregero.multipaper.region.RegionPos;
+import puregero.multipaper.threading.MultiPaperTickThread;
+
 import java.io.File;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -309,6 +315,19 @@ public final class ChunkTaskScheduler {
     }
 
     public boolean executeMainThreadTask() {
+        // MultiPaper start
+        boolean ret = false;
+        for (RegionPos regionPos : world.chunkScheduler.getRegionLocker().getLockedRegions()) {
+            LevelChunkRegion region = world.chunkSource.tickingRegions.get(regionPos);
+            if (region != null) {
+                ret |= region.getInternalTaskQueue().executeTask();
+            }
+        }
+        if (ret || MultiPaperTickThread.isMultiPaperTickThread()) {
+            // Don't run the mainThreadExecutor tasks below if we're a MultiPaperTickThread
+            return ret;
+        }
+        // MultiPaper end
         TickThread.ensureTickThread("Cannot execute main thread task off-main");
         return this.mainThreadExecutor.executeTask();
     }
@@ -486,7 +505,7 @@ public final class ChunkTaskScheduler {
 
     public void scheduleChunkLoad(final int chunkX, final int chunkZ, final ChunkStatus toStatus, final boolean addTicket,
                                   final PrioritisedExecutor.Priority priority, final Consumer<ChunkAccess> onComplete) {
-        if (!TickThread.isTickThread()) {
+        if (!TickThread.isTickThreadFor(world, chunkX, chunkZ)) { // MultiPaper - ensure on chunk's thread
             this.scheduleChunkTask(chunkX, chunkZ, () -> {
                 ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
             }, priority);
@@ -774,16 +793,19 @@ public final class ChunkTaskScheduler {
 
     public PrioritisedExecutor.PrioritisedTask createChunkTask(final int chunkX, final int chunkZ, final Runnable run,
                                                                final PrioritisedExecutor.Priority priority) {
-        return this.mainThreadExecutor.createTask(run, priority);
+        return world.chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(new ChunkPos(chunkX, chunkZ))).getInternalTaskQueue().createTask(run, priority); // MultiPaper
+        // return this.mainThreadExecutor.createTask(run, priority); // MultiPaper
     }
 
     public PrioritisedExecutor.PrioritisedTask scheduleChunkTask(final int chunkX, final int chunkZ, final Runnable run) {
-        return this.mainThreadExecutor.queueRunnable(run);
+        return world.chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(new ChunkPos(chunkX, chunkZ))).getInternalTaskQueue().queueRunnable(run); // MultiPaper
+        // return this.mainThreadExecutor.queueRunnable(run); // MultiPaper
     }
 
     public PrioritisedExecutor.PrioritisedTask scheduleChunkTask(final int chunkX, final int chunkZ, final Runnable run,
                                                                  final PrioritisedExecutor.Priority priority) {
-        return this.mainThreadExecutor.queueRunnable(run, priority);
+        return world.chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(new ChunkPos(chunkX, chunkZ))).getInternalTaskQueue().queueRunnable(run); // MultiPaper
+        // return this.mainThreadExecutor.queueRunnable(run, priority); // MultiPaper
     }
 
     public void executeTasksUntil(final BooleanSupplier exit) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d3239eb3378b66103e178e58a51efb128919c0bf..b52b1ffe427ae4ae6c51d8eb2f1e78349edb2a05 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
@@ -1737,17 +1738,17 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper // Purpur
         // Paper start - Folia scheduler API
         ((io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler) Bukkit.getGlobalRegionScheduler()).tick();
-        getAllLevels().forEach(level -> {
-            for (final Entity entity : level.getEntityLookup().getAllCopy()) { // Paper - rewrite chunk system
-                if (entity.isRemoved()) {
-                    continue;
-                }
-                final org.bukkit.craftbukkit.entity.CraftEntity bukkit = entity.getBukkitEntityRaw();
-                if (bukkit != null) {
-                    bukkit.taskScheduler.executeTick();
-                }
-            }
-        });
+//        getAllLevels().forEach(level -> {
+//            for (final Entity entity : level.getEntityLookup().getAllCopy()) { // Paper - rewrite chunk system
+//                if (entity.isRemoved()) {
+//                    continue;
+//                }
+//                final org.bukkit.craftbukkit.entity.CraftEntity bukkit = entity.getBukkitEntityRaw();
+//                if (bukkit != null) {
+//                    bukkit.taskScheduler.executeTick();
+//                }
+//            }
+//        });
         // Paper end - Folia scheduler API
         io.papermc.paper.adventure.providers.ClickCallbackProviderImpl.CALLBACK_MANAGER.handleQueue(this.tickCount); // Paper
         //this.profiler.push("commandFunctions"); // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 84677d254e9b5c1bbb5100e8d5e10002aae3cfcb..296768dad4aa4aa7b7bb162088dde63446ccdd92 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -13,6 +13,8 @@ import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -43,6 +45,7 @@ import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import puregero.multipaper.region.LevelChunkRegionMap;
 import puregero.multipaper.threading.MultiPaperChunkTicker;
+import puregero.multipaper.threading.MultiPaperTickThread;
 
 public class ServerChunkCache extends ChunkSource {
 
@@ -735,7 +738,7 @@ public class ServerChunkCache extends ChunkSource {
 
     @Override
     public void onLightUpdate(LightLayer type, SectionPos pos) {
-        this.mainThreadProcessor.execute(() -> {
+        this.level.chunkTaskScheduler.scheduleChunkTask(pos.x(), pos.z(), () -> { // MultiPaper - run on chunk thread
             ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.chunk().toLong());
 
             if (playerchunk != null) {
@@ -859,7 +862,12 @@ public class ServerChunkCache extends ChunkSource {
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             }
-            return super.pollTask() | ServerChunkCache.this.level.chunkTaskScheduler.executeMainThreadTask(); // Paper - rewrite chunk system
+            // MultiPaper start - run region tasks aswell when starting or shutting down
+            if (level.getServer().forceTicks || TickThread.isShutdownThread()) {
+                level.getChunkSource().tickingRegions.forEach(region -> region.getInternalTaskQueue().executeTask());
+            }
+            // MultiPaper end
+            return (!MultiPaperTickThread.isMultiPaperTickThread() && super.pollTask()) | ServerChunkCache.this.level.chunkTaskScheduler.executeMainThreadTask(); // Paper - rewrite chunk system // MultiPaper - don't run main thread tasks on workers
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index ad88bd9d6e77caf322d8f9d7fc52c38bee20bda0..c5e2f280d9abeaaa141d68eddd63300f6ede9810 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -174,6 +174,7 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.server.MapInitializeEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
 import org.bukkit.event.world.TimeSkipEvent;
+import puregero.multipaper.region.RegionPos;
 import puregero.multipaper.threading.MultiPaperRegionScheduler;
 // CraftBukkit end
 
@@ -2297,13 +2298,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
             BlockPos blockposition1 = pos.immutable();
 
             optional.ifPresent((holder) -> {
-                this.getServer().execute(() -> {
+                chunkSource.tickingRegions.execute(RegionPos.forChunk(new ChunkPos(pos)), () -> { // MultiPaper
                     this.getPoiManager().remove(blockposition1);
                     DebugPackets.sendPoiRemovedPacket(this, blockposition1);
                 });
             });
             optional1.ifPresent((holder) -> {
-                this.getServer().execute(() -> {
+                chunkSource.tickingRegions.execute(RegionPos.forChunk(new ChunkPos(pos)), () -> { // MultiPaper
                     // Paper start - Remove stale POIs
                     if (optional.isEmpty() && this.getPoiManager().exists(blockposition1, poiType -> true)) {
                         this.getPoiManager().remove(blockposition1);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5abd5ced015be7de740d504b5c0b0620822f22ac..e077376cfb44e51031348932623b58325c89039a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -260,6 +260,7 @@ import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import puregero.multipaper.permissions.MultiPaperPermissions;
+import puregero.multipaper.region.MultiPaperRegionSchedulerApiImpl;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -308,7 +309,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.potion.PaperPotionBrewer potionBrewer; // Paper - Custom Potion Mixes
 
     // Paper start - Folia region threading API
-    private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
+    private final io.papermc.paper.threadedregions.scheduler.RegionScheduler regionizedScheduler = new MultiPaperRegionSchedulerApiImpl(); // MultiPaper
     private final io.papermc.paper.threadedregions.scheduler.FoliaAsyncScheduler asyncScheduler = new io.papermc.paper.threadedregions.scheduler.FoliaAsyncScheduler();
     private final io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler globalRegionScheduler = new io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler();
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
new file mode 100644
index 0000000000000000000000000000000000000000..1ffc040d99aa77965b9db019409864d7416013f7
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -0,0 +1,41 @@
+package puregero.multipaper;
+
+import io.papermc.paper.util.TickThread;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.ChunkPos;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.region.RegionPos;
+
+public class MultiPaper {
+
+    public static void runSync(Location location, Runnable runnable) {
+        runSync(((CraftWorld) location.getWorld()).getHandle(), new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()), runnable);
+    }
+
+    public static void runSync(ServerLevel serverLevel, BlockPos blockPos, Runnable runnable) {
+        runSync(serverLevel, new ChunkPos(blockPos), runnable);
+    }
+
+    public static void runSync(ServerLevel serverLevel, ChunkPos chunkPos, Runnable runnable) {
+        serverLevel.getChunkSource().tickingRegions.scheduleTask(RegionPos.forChunk(chunkPos), runnable);
+    }
+
+    public static void ensureSync(Location location, Runnable runnable) {
+        ensureSync(((CraftWorld) location.getWorld()).getHandle(), new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()), runnable);
+    }
+
+    public static void ensureSync(ServerLevel serverLevel, BlockPos blockPos, Runnable runnable) {
+        ensureSync(serverLevel, new ChunkPos(blockPos), runnable);
+    }
+
+    public static void ensureSync(ServerLevel serverLevel, ChunkPos chunkPos, Runnable runnable) {
+        if (!TickThread.isTickThreadFor(serverLevel, chunkPos)) {
+            runSync(serverLevel, chunkPos, runnable);
+        } else {
+            runnable.run();
+        }
+    }
+
+}
diff --git a/src/main/java/puregero/multipaper/region/DelayedTask.java b/src/main/java/puregero/multipaper/region/DelayedTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..5e502f75055b49d6f5e8258568cec52bc8885439
--- /dev/null
+++ b/src/main/java/puregero/multipaper/region/DelayedTask.java
@@ -0,0 +1,29 @@
+package puregero.multipaper.region;
+
+import com.mojang.logging.LogUtils;
+import org.slf4j.Logger;
+
+public class DelayedTask implements Runnable {
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private final Runnable task;
+    private long delay;
+
+    public DelayedTask(Runnable task, long delay) {
+        this.task = task;
+        this.delay = delay;
+    }
+
+    public boolean shouldRun() {
+        return --delay <= 0;
+    }
+
+    public void run() {
+        try {
+            task.run();
+        } catch (Throwable t) {
+            LOGGER.error("Error when executing task", t);
+        }
+    }
+
+}
diff --git a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
index 96851c9fa41c3f146feb33c00b4e942367d81294..65166e43ae0b69174e12b431fdb4a6925e0976e3 100644
--- a/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
+++ b/src/main/java/puregero/multipaper/region/LevelChunkRegion.java
@@ -1,10 +1,12 @@
 package puregero.multipaper.region;
 
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQueue;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 
 public class LevelChunkRegion {
@@ -12,6 +14,8 @@ public class LevelChunkRegion {
     private final ServerLevel level;
     private final RegionPos regionPos;
     private final List<LevelChunk> levelChunks = new ArrayList<>(RegionPos.REGION_SIZE * RegionPos.REGION_SIZE);
+    private final ConcurrentLinkedQueue<DelayedTask> scheduledTasks = new ConcurrentLinkedQueue<>();
+    private final PrioritisedThreadedTaskQueue internalTasks = new PrioritisedThreadedTaskQueue();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -28,6 +32,14 @@ public class LevelChunkRegion {
         }
     }
 
+    public void scheduleTask(Runnable task, long delay) {
+        scheduledTasks.add(new DelayedTask(task, delay));
+    }
+
+    public PrioritisedThreadedTaskQueue getInternalTaskQueue() {
+        return internalTasks;
+    }
+
     public RegionPos getRegionPos() {
         return regionPos;
     }
@@ -46,8 +58,22 @@ public class LevelChunkRegion {
         }
     }
 
-    public boolean isEmpty() {
-        return levelChunks.isEmpty();
+    public void tickTasks() {
+        if (scheduledTasks.isEmpty()) return;
+
+        List<DelayedTask> toRun = new ArrayList<>();
+        for (DelayedTask task : scheduledTasks) {
+            // Check if a task should run before executing the tasks, as tasks may add more tasks while they are running
+            if (task.shouldRun()) {
+                toRun.add(task);
+            }
+        }
+
+        scheduledTasks.removeAll(toRun);
+        toRun.forEach(DelayedTask::run);
     }
 
+    public boolean isEmpty() {
+        return levelChunks.isEmpty() && scheduledTasks.isEmpty() && internalTasks.getTotalTasksExecuted() >= internalTasks.getTotalTasksScheduled();
+    }
 }
diff --git a/src/main/java/puregero/multipaper/region/LevelChunkRegionMap.java b/src/main/java/puregero/multipaper/region/LevelChunkRegionMap.java
index ccda9c9f240205d744e9e7beb68bf7a340598ef1..607004069df259785ac3227ca538b988e21371ce 100644
--- a/src/main/java/puregero/multipaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/puregero/multipaper/region/LevelChunkRegionMap.java
@@ -57,4 +57,25 @@ public class LevelChunkRegionMap {
         regionsCopy.forEach(consumer);
     }
 
+    /**
+     * Schedule a task to run on the given region's thread at the beginning of the next tick
+     */
+    public void scheduleTask(RegionPos regionPos, Runnable task) {
+        scheduleTask(regionPos, task, 0);
+    }
+
+    /**
+     * Schedule a task to run on the given region's thread after a certain number of ticks
+     */
+    public void scheduleTask(RegionPos regionPos, Runnable task, long delayInTicks) {
+        getOrCreate(regionPos).scheduleTask(task, delayInTicks);
+    }
+
+    /**
+     * Execute a task on the given region's thread at the next given opportunity
+     */
+    public void execute(RegionPos regionPos, Runnable task) {
+        getOrCreate(regionPos).getInternalTaskQueue().queueRunnable(task);
+    }
+
 }
\ No newline at end of file
diff --git a/src/main/java/puregero/multipaper/region/MultiPaperRegionSchedulerApiImpl.java b/src/main/java/puregero/multipaper/region/MultiPaperRegionSchedulerApiImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..43464b91841109668c811e83568c92b568f3044d
--- /dev/null
+++ b/src/main/java/puregero/multipaper/region/MultiPaperRegionSchedulerApiImpl.java
@@ -0,0 +1,142 @@
+package puregero.multipaper.region;
+
+import ca.spottedleaf.concurrentutil.util.Validate;
+import io.papermc.paper.threadedregions.scheduler.RegionScheduler;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.ChunkPos;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.plugin.IllegalPluginAccessException;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+
+public class MultiPaperRegionSchedulerApiImpl implements RegionScheduler {
+
+
+    @Override
+    public void execute(@NotNull Plugin plugin, @NotNull World world, int chunkX, int chunkZ, @NotNull Runnable run) {
+        run(plugin, world, chunkX, chunkZ, task -> run.run());
+    }
+
+    @Override
+    public @NotNull ScheduledTask run(@NotNull Plugin plugin, @NotNull World world, int chunkX, int chunkZ, @NotNull Consumer<ScheduledTask> task) {
+        return runDelayed(plugin, world, chunkX, chunkZ, task, 1);
+    }
+
+    @Override
+    public @NotNull ScheduledTask runDelayed(@NotNull Plugin plugin, @NotNull World world, int chunkX, int chunkZ, @NotNull Consumer<ScheduledTask> task, long delayTicks) {
+        return runAtFixedRate(plugin, world, chunkX, chunkZ, task, delayTicks, -1);
+    }
+
+    @Override
+    public @NotNull ScheduledTask runAtFixedRate(@NotNull Plugin plugin, @NotNull World world, int chunkX, int chunkZ, @NotNull Consumer<ScheduledTask> task, long initialDelayTicks, long periodTicks) {
+        Validate.notNull(plugin, "Plugin may not be null");
+        Validate.notNull(world, "World may not be null");
+        Validate.notNull(task, "Task may not be null");
+        if (initialDelayTicks <= 0) {
+            throw new IllegalArgumentException("Initial delay ticks may not be <= 0");
+        }
+        if (periodTicks == 0) {
+            throw new IllegalArgumentException("Period ticks may not be <= 0");
+        }
+
+        if (!plugin.isEnabled()) {
+            throw new IllegalPluginAccessException("Plugin attempted to register task while disabled");
+        }
+
+        return new RegionScheduledTask(plugin, world, chunkX, chunkZ, task, initialDelayTicks, periodTicks);
+    }
+
+    private class RegionScheduledTask implements ScheduledTask, Runnable {
+
+        private final Plugin plugin;
+        private final ServerLevel serverLevel;
+        private final RegionPos regionPos;
+        private final Consumer<ScheduledTask> task;
+        private final long periodTicks;
+        private final AtomicReference<ExecutionState> executionState = new AtomicReference<>(ExecutionState.IDLE);
+
+        public RegionScheduledTask(Plugin plugin, World world, int chunkX, int chunkZ, Consumer<ScheduledTask> task, long delayTicks, long periodTicks) {
+            this.plugin = plugin;
+            this.serverLevel = ((CraftWorld) world).getHandle();
+            this.task = task;
+            this.periodTicks = periodTicks;
+            this.regionPos = RegionPos.forChunk(new ChunkPos(chunkX, chunkZ));
+
+            schedule(delayTicks);
+        }
+
+        private void schedule(long delayTicks) {
+            serverLevel.getChunkSource().tickingRegions.scheduleTask(regionPos, this, delayTicks);
+        }
+
+        @Override
+        public @NotNull Plugin getOwningPlugin() {
+            return plugin;
+        }
+
+        @Override
+        public boolean isRepeatingTask() {
+            return periodTicks > 0;
+        }
+
+        @Override
+        public @NotNull CancelledState cancel() {
+            if (executionState.compareAndSet(ExecutionState.IDLE, ExecutionState.CANCELLED)) {
+                return CancelledState.CANCELLED_BY_CALLER;
+            }
+            if (executionState.compareAndSet(ExecutionState.RUNNING, ExecutionState.CANCELLED_RUNNING)) {
+                if (isRepeatingTask()) {
+                    return CancelledState.NEXT_RUNS_CANCELLED;
+                } else {
+                    return CancelledState.RUNNING;
+                }
+            }
+            return switch (executionState.get()) {
+                case IDLE, RUNNING -> {
+                    executionState.set(ExecutionState.CANCELLED);
+                    yield CancelledState.CANCELLED_BY_CALLER;
+                }
+                case CANCELLED -> CancelledState.CANCELLED_ALREADY;
+                case CANCELLED_RUNNING -> CancelledState.NEXT_RUNS_CANCELLED_ALREADY;
+                case FINISHED -> CancelledState.ALREADY_EXECUTED;
+            };
+        }
+
+        @Override
+        public @NotNull ExecutionState getExecutionState() {
+            return executionState.get();
+        }
+
+        @Override
+        public void run() {
+            if (!getOwningPlugin().isEnabled()) {
+                executionState.set(ExecutionState.CANCELLED);
+                return;
+            }
+
+            if (!executionState.compareAndSet(ExecutionState.IDLE, ExecutionState.RUNNING)) {
+                return;
+            }
+
+            try {
+                task.accept(this);
+            } catch (Throwable throwable) {
+                this.plugin.getLogger().log(Level.WARNING, "Region task for " + this.plugin.getDescription().getFullName() + " generated an exception", throwable);
+            } finally {
+                executionState.compareAndSet(ExecutionState.RUNNING, isRepeatingTask() ? ExecutionState.IDLE : ExecutionState.FINISHED);
+                executionState.compareAndSet(ExecutionState.CANCELLED_RUNNING, ExecutionState.CANCELLED);
+
+                if (isRepeatingTask()) {
+                    schedule(periodTicks);
+                }
+            }
+        }
+    }
+}
+
diff --git a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
index 509219927c274f7170764d7cb0d4c9a9779fc3b5..88ab6031b615199f43b63c5e2dcd7c566f5c4c50 100644
--- a/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
+++ b/src/main/java/puregero/multipaper/threading/MultiPaperChunkTicker.java
@@ -15,6 +15,7 @@ import puregero.multipaper.region.LevelChunkRegion;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 
 public class MultiPaperChunkTicker {
@@ -46,14 +47,25 @@ public class MultiPaperChunkTicker {
     }
 
     private static void _tickRegion(ServerLevel level, LevelChunkRegion region, NaturalSpawner.SpawnState spawnercreature_d) {
+        if (!(MultiPaperTickThread.isMultiPaperTickThread())) {
+            throw new IllegalStateException("Ticking region " + level.convertable.getLevelId() + " " + region.getRegionPos() + " outside of MultiPaperTickThread!");
+        }
+
+        while (region.getInternalTaskQueue().executeTask());
+
+        region.tickTasks();
         region.forEach(chunk -> _tickChunk(level, chunk, spawnercreature_d));
 
+        while (region.getInternalTaskQueue().executeTask());
+
         if (region.isEmpty()) {
             level.chunkSource.tickingRegions.remove(region.getRegionPos());
         }
     }
 
     private static void _tickChunk(ServerLevel level, LevelChunk chunk1, NaturalSpawner.SpawnState spawnercreature_d) {
+        chunk1.getChunkHolder().getEntityChunk().forEach(entity -> Optional.ofNullable(entity.getBukkitEntityRaw()).ifPresent(bukkit -> bukkit.taskScheduler.executeTick()));
+
         // Start - Import the same variables as the original chunk ticking method to make copying new changes easier
         int j = 1; // Inhabited time increment in ticks
         boolean flag = level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !level.players().isEmpty(); // Should run mob spawning code
diff --git a/src/main/java/puregero/multipaper/threading/MultiPaperRegionLocker.java b/src/main/java/puregero/multipaper/threading/MultiPaperRegionLocker.java
index 5faabd96d271d7acd734cc620e25c4b6558057a2..c6ca26d6416c48e3e4bfed97bef5a671442d0941 100644
--- a/src/main/java/puregero/multipaper/threading/MultiPaperRegionLocker.java
+++ b/src/main/java/puregero/multipaper/threading/MultiPaperRegionLocker.java
@@ -15,7 +15,7 @@ import java.util.function.Supplier;
 
 public class MultiPaperRegionLocker {
 
-    private static final int REGION_LOCK_RADIUS = 1;
+    public static final int REGION_LOCK_RADIUS = 1;
 
     private final ConcurrentHashMap<RegionPos, Thread> lockedRegions = new ConcurrentHashMap<>();
 
